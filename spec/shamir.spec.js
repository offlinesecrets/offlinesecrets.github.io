const {Shamir} = require('../shamir')

const SECRETS = [
  '!',
  'w',
  '(3',
  'zMd2j*d-',
  ']B-bh.5=-hxM4]{4A]aEhA70KSuq-G(Rk5fgpgc:h(E5MP-y?=}Pj_]mM8C/+;aXE[(MH(cZ{y}!&p$}?ZJ=a9pzS!jL:?h@X0eR.?vL%C_8izWz}=r5+-7Q)__]VRfW5X.?T*g3P@#K-G,d(qrgU?b3m})q%&%.}w;{{v$La)xDyAx3)=HJ]3(m)e6X&bZiaG7_k#0nNAS7i2v3*S:tJS%L7dj!FWKT@wB=$0]B69:1Pw7&P6/g]X[kM&NvgfUCg_EcEi8BnbBh$4+vW%_4RDM/2ji3*Y=gZCLPLJDta%{$/+Qv}D.4BS$/p[P4Zvw;$}6CrRH83Uvg4:M[mdH!4QZ/xe[6%W}=cG=CR0qE#(t-]UF4N@4G3c5([K?H1,;Rh%-F/bi8JTCBvVV26bn?wu3ApKp+9U.E-E2y0*}WanaVVm{R&7NQZv:;yZebkw(dipp=+,AK8tRpG_hV}Sxg969!u-@_8eJ*;t@Mc%r5JPJp4xN5.VhnE:!(Q!%RTT{W',
 ]

function combinations(array) {
  return new Array(1 << array.length).fill().map(
    (e1, i) => array.filter((e2, j) => i & 1 << j));
}


describe("For a given prime and min secret length", function() {
  const prime = BigInt('746697854386008132815920241340609174164265132104079677270038385566920684555356536979089970240644018410661432131806504962783023996509487242300565704299422902231694630531578864233122908956803846340593686397637240814918393327192995290171983811952312931629067306802403155598405758431608729890495776482322026757557470643042050105856287301927838162776555550063807889900532712828270059017066249501667141260799248277616455781034085159849034736850289210732280150653746797732776419176899687873397488541366988074589909307207269368369336030653884243808095724198730452895363633875216915993913863073740087317124882135637890917110233078483988806196121982309450139128371233247663897089627944687275666291046219662268804411182233491225239524802073102010975713834355322656674424077944963843139442130652541958334150784658168892298388776582947163119901929289455619975176496337460199476805700569058958563098868528719526683687568991273117655645044110459598150439783983358126897158927053845672510816385251089140030607454639241508963809650329210500103191698673487493393944975132563842330237994017814498328711096580790555143796621798193338101279135623663959713009523489002934518128577698190436601633778276319814923074315862616621540853690113317426907106169753') ;

  const shamir = new Shamir(prime, 20);
  for (let secretIndex = 0 ; secretIndex < SECRETS.length ; secretIndex++) {
    const secret = SECRETS[secretIndex];
    for (let sharesCount = 2; sharesCount <= 10; sharesCount++) {
      for (let quorumCount = 2; quorumCount <= sharesCount; quorumCount++) {
        for (let recoverySharesCount = quorumCount; recoverySharesCount <= sharesCount; recoverySharesCount++) {
          let shares = shamir.split(secret, quorumCount, sharesCount);
          let recoverySharesCombinations = combinations(shares).filter(a => a.length === recoverySharesCount);
          for (let recoveryCombinationIndex = 0; recoveryCombinationIndex < recoverySharesCombinations.length; recoveryCombinationIndex++) {
            it(`should recover secret ${secretIndex} for ${sharesCount} shares, quorum of ${quorumCount}, recovery shares count ${recoverySharesCount}, recovery combination ${recoveryCombinationIndex}`, function () {
              let result = shamir.combine(recoverySharesCombinations[recoveryCombinationIndex]);
              expect(result).toBe(secret);
            });
          }
        }
      }
    }
  }
});


describe("For a range of min secret length", function() {
  const prime = BigInt('746697854386008132815920241340609174164265132104079677270038385566920684555356536979089970240644018410661432131806504962783023996509487242300565704299422902231694630531578864233122908956803846340593686397637240814918393327192995290171983811952312931629067306802403155598405758431608729890495776482322026757557470643042050105856287301927838162776555550063807889900532712828270059017066249501667141260799248277616455781034085159849034736850289210732280150653746797732776419176899687873397488541366988074589909307207269368369336030653884243808095724198730452895363633875216915993913863073740087317124882135637890917110233078483988806196121982309450139128371233247663897089627944687275666291046219662268804411182233491225239524802073102010975713834355322656674424077944963843139442130652541958334150784658168892298388776582947163119901929289455619975176496337460199476805700569058958563098868528719526683687568991273117655645044110459598150439783983358126897158927053845672510816385251089140030607454639241508963809650329210500103191698673487493393944975132563842330237994017814498328711096580790555143796621798193338101279135623663959713009523489002934518128577698190436601633778276319814923074315862616621540853690113317426907106169753') ;

  for (let minSecretLength = 0 ; minSecretLength < 100 ; minSecretLength++ ) {
    const shamir = new Shamir(prime, minSecretLength);
    for (let secretIndex = 0; secretIndex < SECRETS.length; secretIndex++) {
      const secret = SECRETS[secretIndex];
      for (let sharesCount = 4; sharesCount <= 5; sharesCount++) {
        for (let quorumCount = 3; quorumCount <= sharesCount; quorumCount++) {
          for (let recoverySharesCount = quorumCount; recoverySharesCount <= sharesCount; recoverySharesCount++) {
            let shares = shamir.split(secret, quorumCount, sharesCount);
            let recoverySharesCombinations = combinations(shares).filter(a => a.length === recoverySharesCount);
            for (let recoveryCombinationIndex = 0; recoveryCombinationIndex < recoverySharesCombinations.length; recoveryCombinationIndex++) {
              it(`should recover secret ${secretIndex} for ${sharesCount} shares, quorum of ${quorumCount}, recovery shares count ${recoverySharesCount}, recovery combination ${recoveryCombinationIndex}`, function () {
                let result = shamir.combine(recoverySharesCombinations[recoveryCombinationIndex]);
                expect(result).toBe(secret);
              });
            }
          }
        }
      }
    }
  }
});


describe("For a range of primes", function() {
  const PRIMES = [
    BigInt('746697854386008132815920241340609174164265132104079677270038385566920684555356536979089970240644018410661432131806504962783023996509487242300565704299422902231694630531578864233122908956803846340593686397637240814918393327192995290171983811952312931629067306802403155598405758431608729890495776482322026757557470643042050105856287301927838162776555550063807889900532712828270059017066249501667141260799248277616455781034085159849034736850289210732280150653746797732776419176899687873397488541366988074589909307207269368369336030653884243808095724198730452895363633875216915993913863073740087317124882135637890917110233078483988806196121982309450139128371233247663897089627944687275666291046219662268804411182233491225239524802073102010975713834355322656674424077944963843139442130652541958334150784658168892298388776582947163119901929289455619975176496337460199476805700569058958563098868528719526683687568991273117655645044110459598150439783983358126897158927053845672510816385251089140030607454639241508963809650329210500103191698673487493393944975132563842330237994017814498328711096580790555143796621798193338101279135623663959713009523489002934518128577698190436601633778276319814923074315862616621540853690113317426907106169753'),
    BigInt('736188193201505762058463950233341864259564454383030120660719648113248911818636915012291475526116178232937167541999781691271125513663368086128473197502597893844841788621344663649835523008913481388473543839192752672753302973241102429829318190047747934409106193288922732235740284162119753838204316583227931975339399781556089190312707088151354741726924275734659993074016298048916574770665105032722384232224975162074130643746075746707810364533680884169862339246427921860716035330956400169148403812724197156360605129518772669153155926858187763580169538331726313160869432618799011349552030809855073914902186012078967299919641992714474557242712496550300316465733645365086271429643368694762220165335214037516676438986797277008880474544066727029813167485988820539945979540085314154848105717562566913921569575743652700284328143885040515569151403858001807840710395783937489321435721242744778319742983359263587280764894331584810060326363584093258388398368602778042257550764895513486789014503797513468753150254184376413896365282407463551454459580280714249439256209848470466265085011065176491985690437877122078341952341032606431964807247483219605085046137170908464270322778967345860393541398192910755838037461695202820695791923171350570068050570861'),
    BigInt('598487448903790679680681852789770148290581743061669486142082749622083499543868771399184077682560113580024147074542633128441350624750930296763140235027392043645873556750507546807878445378260219559737931475341985372679495532728046035111843229266455230380151511295916353813079760068368220878338549190396661587607978749733428051124205218584818034369375233806321058083381585103114310023014470851592459633194888916226012388235368896417941988589008042487850903805301271563302504743347641098438217787377166662872227204510446567192745195668462036741929623221358662351960886550999845246011203326033362242135992905890474950228357091693672472596126333186211636065039943977776755273595946750786830103689143438894010365594635641803792149154594979067187454302856464655827213394550096979865499134822056936022849722792498180909204386709381474647447051074207954796750131318039483099326104779820080258549132070892512412676950869348419583626751882235780870042631214200952632836467114919997514059040105653124527157969804099734639290621106793637117929259179579830091561106532557880043756556256707943535896133342703848079746017894255582467938275314787361921387519722716540141270782184554967085606463130053535816782978168889403806222873589213645263303699611'),
    BigInt('554100837461745111401950424536061631275388061701027152884099447451570516664163801802447601103023931653160548100127581409487598700248899166737334582358504655986674403843210461959419091056260238213054289841078602803160288398584420821668892895822311493280670693895559410602827283688308782537217090387447942125162967746266795125007717843385494261262014888420573038178431431205645649312141351754379088591831298643593709137895495061693246280096510737379181644672901829588918263277267664280009550758879786105301328464411718609907548211075203298336543845463375758121754397403711570147653510130301059995884102654599163453617910338720834366536583526568021030956056066083890371438347241762429550026213757687498354067219565478253572322458232128989016063727463114688542633929438660899032620611487876822201199626984316426702939567240657151682983018754850199186787335778936619747664788621641106358235066046263593609746649263806168918057571079451570850218217355526002951324816149143237588213339149775512149203631717480596210473739725500569468178773703569134975856215724591459399280048482881395962675615070712704533534240039895437555230196655896268390744741912507411965349080806372522537382777090398247915081375434757521410611578733497591323465877789'),
    BigInt('913719903322046452802619483335689679813806176895472067940779325499642732191655821841849653756431473141102669092738922218017741575498651171718510393670308792463065730980156674830963147816742863939362233936649933505110850209863639706833374226154398371134188530378904929129457667923599238136656305570073082201939213901669144838969334894547550800471402213965632565996249312182439928666171893755416601874710103039884154819320023676400539830875514073297387588473622383818958871756333457879783943240525405920411137151874059087098670204287711938650498990138593547713132305551537339167795570672220320538642647588262403673977483031071518900905004754488324234483907910414269641308696917205722255432547671494708068567302024829762519343481673309617137781204242042840142835915323724242053651289325605874428920226338567739291859109391340558657734425178140260404054426960328390182358370479131943570226523282994766517760329447560966573997484184645099252724468463617816507483900516326608692454404981330413890972677974116794872323084457627007749813082596173792210285168680602894188414681096583423810759929098624850446194715962557699671433861878013599992267773505905000897532618406582201598097689304785992618065058126266062920419634489162636573845440141')
    ]

  for (let primeIndex = 0 ; primeIndex < PRIMES.length ; primeIndex++) {
    const shamir = new Shamir(PRIMES[primeIndex], 10);
    for (let secretIndex = 0; secretIndex < SECRETS.length; secretIndex++) {
      const secret = SECRETS[secretIndex];
      for (let sharesCount = 4; sharesCount <= 5; sharesCount++) {
        for (let quorumCount = 3; quorumCount <= sharesCount; quorumCount++) {
          for (let recoverySharesCount = quorumCount; recoverySharesCount <= sharesCount; recoverySharesCount++) {
            let shares = shamir.split(secret, quorumCount, sharesCount);
            let recoverySharesCombinations = combinations(shares).filter(a => a.length === recoverySharesCount);
            for (let recoveryCombinationIndex = 0; recoveryCombinationIndex < recoverySharesCombinations.length; recoveryCombinationIndex++) {
              it(`should recover secret ${secretIndex} for primeIndex ${primeIndex}, ${sharesCount} shares, quorum of ${quorumCount}, recovery shares count ${recoverySharesCount}, recovery combination ${recoveryCombinationIndex}`, function () {
                let result = shamir.combine(recoverySharesCombinations[recoveryCombinationIndex]);
                expect(result).toBe(secret);
              });
            }
          }
        }
      }
    }
  }
});
